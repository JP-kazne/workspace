

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)
from Crypto.Util.number import *

n, e, c = _sage_const_0 , _sage_const_0 , _sage_const_0 
exec(open('pppp/output.txt').read())

p = GCD(n, c[_sage_const_0 ][_sage_const_0 ]) # c[0][0] = (p*r)^e
q = n // p
assert p*q == n
d = int(pow(e, -_sage_const_1 , (p-_sage_const_1 )*(q-_sage_const_1 )))

m = matrix(Zmod(n), c)**d

flag = long_to_bytes(GCD(int(m[_sage_const_1 ][_sage_const_1 ]),int(m[_sage_const_1 ][_sage_const_2 ])))
flag += long_to_bytes(GCD(int(m[_sage_const_2 ][_sage_const_2 ]),int(m[_sage_const_2 ][_sage_const_3 ])))

print(flag)

