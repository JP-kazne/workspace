

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x2526512a4abf23fca755defc497b9ab = Integer(0x2526512a4abf23fca755defc497b9ab); _sage_const_257 = Integer(257); _sage_const_0x592f144c0aeac50bdf57cf6a6a6e135 = Integer(0x592f144c0aeac50bdf57cf6a6a6e135); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
from Crypto.Util.number import *

c = _sage_const_0x2526512a4abf23fca755defc497b9ab 
e = _sage_const_257 
n = _sage_const_0x592f144c0aeac50bdf57cf6a6a6e135 

f = [f[_sage_const_0 ] for f in list(factor(n)) for _ in range(f[_sage_const_1 ])]
assert len(f) == _sage_const_2 
p, q = f
d = pow(e, -_sage_const_1 , (p-_sage_const_1 )*(q-_sage_const_1 ))
m = pow(c, d, n)
print(long_to_bytes(m))

