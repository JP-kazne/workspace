

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from string import ascii_lowercase, digits
CHARSET = "DUCTF{}_!?'" + ascii_lowercase + digits
n = len(CHARSET)

def encrypt(msg, f):
    ct = ''
    for c in msg:
        ct += CHARSET[f.substitute(CHARSET.index(c))]
    return ct

P = PolynomialRing(GF(n), names=('x',)); (x,) = P._first_ngens(1)
enc = open('output.txt', 'r').read().strip()
# f = P.random_element(6)
# f = a0*x^6 + a1*x^5 + a2*x^4 + a3*x^3 + a4*x^2 + a5*x + a6

mat = []
for i in range(_sage_const_7 ):
    mat.append([i**_sage_const_6 , i**_sage_const_5 , i**_sage_const_4 , i**_sage_const_3 , i**_sage_const_2 , i**_sage_const_1 , i**_sage_const_0 ])    
M = Matrix(P, mat)
vec = [CHARSET.index(enc[i]) for i in range(_sage_const_6 )]
vec.append(CHARSET.index(enc[-_sage_const_1 ]))
b = vector(P, vec)
solve = M.solve_right(b)

f = solve[_sage_const_0 ]*x**_sage_const_6  + solve[_sage_const_1 ]*x**_sage_const_5  + solve[_sage_const_2 ]*x**_sage_const_4  + solve[_sage_const_3 ]*x**_sage_const_3  + solve[_sage_const_4 ]*x**_sage_const_2  + solve[_sage_const_5 ]*x + solve[_sage_const_6 ]

enc_dict = {}
for c in CHARSET:
    enc_dict[c] = encrypt(c, f)

print(enc_dict, len(enc_dict))
FLAG = ''
for e in enc:
    tmp = ''
    for key, value in enc_dict.items():
        if value == e:
            tmp += key
    if len(tmp) == _sage_const_1 :
        FLAG += tmp
    else:
        FLAG += '[' + tmp + ']'

print(FLAG)

