

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_169221770188000341507764005330769042705223611712308424479120192596136318818708135716157255550936563268500310852894489839470320516645317338473018150885997977008925839939560590924435380239519554475266121835753044660177349444503693993991253475530436734034224314165897550185719665717183285653938232013807360458249 = Integer(169221770188000341507764005330769042705223611712308424479120192596136318818708135716157255550936563268500310852894489839470320516645317338473018150885997977008925839939560590924435380239519554475266121835753044660177349444503693993991253475530436734034224314165897550185719665717183285653938232013807360458249); _sage_const_17 = Integer(17); _sage_const_100233131931360278332734341652304555814094487252151131735286074616555402795190797647001889669472290770925839013131356212574455274690422113278015571750653365512998669453161955302008599029919101244702933443124944274359143831492874463245444294673660944786888148517110942002726017336219552279179125115273728023902 = Integer(100233131931360278332734341652304555814094487252151131735286074616555402795190797647001889669472290770925839013131356212574455274690422113278015571750653365512998669453161955302008599029919101244702933443124944274359143831492874463245444294673660944786888148517110942002726017336219552279179125115273728023902)
from Crypto.Util.number import *

def fermatfactor(N):
       if N <= _sage_const_0 : return [N]
       if is_even(N): return [_sage_const_2 ,N/_sage_const_2 ]
       a = ceil(sqrt(N))
       while not is_square(a**_sage_const_2 -N):
         a = a + _sage_const_1 
       b = sqrt(a**_sage_const_2 -N)
       return [a - b,a + b]

if __name__ == '__main__':
    n = _sage_const_169221770188000341507764005330769042705223611712308424479120192596136318818708135716157255550936563268500310852894489839470320516645317338473018150885997977008925839939560590924435380239519554475266121835753044660177349444503693993991253475530436734034224314165897550185719665717183285653938232013807360458249 
    e = _sage_const_17 
    c = _sage_const_100233131931360278332734341652304555814094487252151131735286074616555402795190797647001889669472290770925839013131356212574455274690422113278015571750653365512998669453161955302008599029919101244702933443124944274359143831492874463245444294673660944786888148517110942002726017336219552279179125115273728023902 
    [p,q] = fermatfactor(n)
    
    _lambda = (p-_sage_const_1 )*(q-_sage_const_1 ) // GCD(p-_sage_const_1 , q-_sage_const_1 )
    assert _lambda % e == _sage_const_0  or _lambda // e % e != _sage_const_0 
    L = pow(_sage_const_2 , _lambda // e, n)
    assert L > _sage_const_1 
    d = pow(e, -_sage_const_1 , _lambda // e)
    assert e * d % (_lambda // e) == _sage_const_1 

    for i in range(e):
        tmp_flag = long_to_bytes(pow(c, d, n) * pow(L, i, n) % n)
        if b"ctf4b" in tmp_flag:
            print(tmp_flag)

