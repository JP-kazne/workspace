

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
from Crypto.Util.number import long_to_bytes

f = open('knapsack/output.txt', 'r').read().replace(':','=')
b = []
c = _sage_const_0 
exec(f)

def create_matrix(c,pk):
    matrix_size = len(pk) + _sage_const_1 
    M = [
        [_sage_const_0  for _ in range(matrix_size)] for _ in range(matrix_size)
    ]

    for i in range(matrix_size - _sage_const_1 ):
        M[i][_sage_const_0 ] = pk[i]
        M[i][i+_sage_const_1 ] = _sage_const_2 
        M[matrix_size - _sage_const_1 ][i+_sage_const_1 ] = -_sage_const_1 

    M[matrix_size - _sage_const_1 ][_sage_const_0 ] = - c
    return M

def is_valid_vector(b):
    if b[_sage_const_0 ] != _sage_const_0 :
        return False
    for i, x in enumerate(b):
        if i != _sage_const_0  and abs(x) != _sage_const_1 :
            return False
    return True

lllm = Matrix(ZZ, create_matrix(c,b)).LLL()

flag_vecs = []
for basis in lllm:
    if is_valid_vector(basis):
        flag_vecs.append(basis)

for v in flag_vecs:
    flag = ""
    for _bit in reversed(v[_sage_const_1 :]):
        c = ("1" if _bit == _sage_const_1  else "0")
        flag = c + flag

    print(long_to_bytes(int(flag, _sage_const_2 )))

